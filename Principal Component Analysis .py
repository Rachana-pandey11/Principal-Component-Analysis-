# -*- coding: utf-8 -*-
"""ML Lab - 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TVQt3OxQ8g9woYHD5_GpPVo2T6Q4rvpw

Aim: Implement **Principal Component Analysis** technique of dimensionality reduction and evaluate the performance with a classifier
"""

import pandas as pd
import numpy as np
from google.colab import files
uploaded = files.upload()

# Commented out IPython magic to ensure Python compatibility.
data = pd.read_csv('data.csv')
data = data.sample(frac=1)
dataset = np.array(data)
X = dataset[:,2:32]
Y = dataset[:,1]
from sklearn import preprocessing
le = preprocessing.LabelEncoder()
Y = le.fit_transform(Y)
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 
0.20)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train) 
X_test = scaler.transform(X_test)
from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train,Y_train)
y_predict = model.predict(X_test)
 
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(Y_test, y_predict)
print("\n---- Without Dimensionality Reduction ----")
print("Accuracy on test set : ", accuracy)
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score

def plot_roc_curve(fpr1, tpr1, fpr2, tpr2):
 plt.plot(fpr1, tpr1, color='red', label = "AUC without PCA = %0.2f" 
# % auc)
 plt.plot(fpr2, tpr2, color='green', label = "AUC with PCA = %0.2f" 
# % auc_pca)
 plt.plot([0, 1], [0, 1], color='darkblue', linestyle='--')
 plt.xlabel('False Positive Rate', fontsize=12)
 plt.ylabel('True Positive Rate', fontsize=12)
 plt.title('Receiver Operating Characteristic (ROC) Curve', 
fontsize=12)
 plt.legend()
 plt.show()
probs = model.predict_proba(X_test)
probs = probs[:, 1]
auc = roc_auc_score(Y_test, probs)
fpr1, tpr1, thresholds1 = roc_curve(Y_test, probs)
#Dimensionality reduction - Principal Component Analysis Algorithm
sc = StandardScaler()
X_scaled = sc.fit_transform(X)
from sklearn.decomposition import PCA
pca = PCA(n_components = 6)
pca.fit(X_scaled)

transformed_df = pd.DataFrame(pca.transform(X_scaled), 
 columns=['PC1', 'PC2', 'PC3', 
 'PC4', 'PC5', 'PC6'])
transformed_df = np.array(transformed_df)
pca_X_train, pca_X_test, pca_Y_train, pca_Y_test = train_test_split(transformed_df, Y, test_size = 0.20)
model = GaussianNB()
model.fit(pca_X_train, pca_Y_train)
pca_y_predict = model.predict(pca_X_test)
pca_accuracy = accuracy_score(pca_Y_test, pca_y_predict)
print("\n---- With Dimensionality Reduction (PCA) ----")
print("Accuracy on test set : ", pca_accuracy)
print("\nEigen Values : ")
print(pca.explained_variance_)
print()
print("Variances (Percentage) : ")
print(pca.explained_variance_ratio_ * 100)
print()
print("Eigen Vectors : ")
print(pca.components_)
probs_pca = model.predict_proba(pca_X_test)
probs_pca = probs_pca[:, 1]

auc_pca = roc_auc_score(pca_Y_test, probs_pca)
fpr2, tpr2, thresholds2 = roc_curve(pca_Y_test, probs_pca)
plot_roc_curve(fpr1, tpr1, fpr2, tpr2)